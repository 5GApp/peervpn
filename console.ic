/***************************************************************************
 *   Copyright (C) 2012 by Tobias Volk                                     *
 *   mail@tobiasvolk.de                                                    *
 *                                                                         *
 *   This program is free software: you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation, either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *
 ***************************************************************************/



// print table of active peers
static void printActivePeerTable() {
	char str[8192];
	p2psecStatus(g_p2psec, str, 8192);
	printf("%s\n", str);
}


// parse command
static void decodeConsole(char *cmd, int cmdlen) {
	char text[4096];
	char pa[1024];
	char pb[1024];
	char pc[1024];
	int i, j;
	unsigned char new_peeraddr[peeraddr_SIZE];
	pa[0] = '\0';
	pb[0] = '\0';
	pc[0] = '\0';
	sscanf(cmd,"%s %s %s",pa,pb,pc);
	if(pa[0] == 'A' || pa[0] == 'a') {
		// ACTIVEPEERTABLE
		printActivePeerTable();
	}
	if(pa[0] == 'I' || pa[0] == 'i') {
		// INSERTPEER <address>
		if(ioGetUDPAddress(&iostate, new_peeraddr, pb, pc)) {
			if(p2psecConnect(g_p2psec, new_peeraddr)) {
				utilByteArrayToHexstring(text, 4096, new_peeraddr, peeraddr_SIZE);
				printf("connecting to %s...\n", text);
			}
		}
		else {
			printf("could not get peer address.\n");
		}
	}
	if(pa[0] == 'P' || pa[0] == 'p') {
		// PING <peerid>
		sscanf(pb,"%d",&i);
		peermgtSendPing(&g_p2psec->mgt, NULL, i);
	}
	if(pa[0] == 'R' || pa[0] == 'r') {
		// RELAYPING <relayid> <peerid>
		sscanf(pb,"%d",&i);
		sscanf(pc,"%d",&j);
		peermgtSendPing(&g_p2psec->mgt, NULL, i);
		utilWriteInt32(g_p2psec->mgt.rrmsg.msg, j);
		g_p2psec->mgt.rrmsgtype = packet_PLTYPE_RELAY_IN;
	}
}
