/***************************************************************************
 *   Copyright (C) 2012 by Tobias Volk                                     *
 *   mail@tobiasvolk.de                                                    *
 *                                                                         *
 *   This program is free software: you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation, either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *
 ***************************************************************************/


// generates warning message
static void logWarning(char *msg) {
	if(msg != NULL) printf("warning: %s\n",msg);
}


// Connect initpeers.
static void connectInitpeers() {
	int i,j,k;
	char *hostname = NULL;
	char *port = NULL;
	unsigned char new_peeraddr[peeraddr_SIZE];
	i=0;j=0;k=0;
	for(;;) {
		j = g_initpeers[i];
		if((j > 0) && (i+j+1 < INITPEER_STORAGE)) {
			if(k) {
				port = &g_initpeers[i+1];
				printf("[%d] resolving %s:%s...\n",utilGetTime(),hostname,port);
				if(ioGetUDPAddress(&iostate, new_peeraddr, hostname, port)) {
					if(p2psecConnect(g_p2psec,new_peeraddr)) {
						printf("             done.\n");
					}
					else {
						printf("             failed: connection could not be created.\n");
					}
				}
				else {
					printf("             failed: name could not be resolved.\n");
				}
				k=0;
			}
			else {
				hostname = &g_initpeers[i+1];
				k=1;
			}
			i=i+j+1;
		}
		else {
			break;
		}
	}
}


// the mainloop
static void mainLoop() {
	int tnow;
	unsigned char buf[4096];
	unsigned char msgbuf[4096];
	unsigned char cmdbuf[1024];
	unsigned char tapmsgbuf[1024];
	unsigned char *msg;
	int lastinit = 0;
	int laststatus = 0;
	int lastconnectcount = 0;
	int connectcount = 0;
	int do_broadcast = 0;
	int ndp_peerid = 0;
	int ndp_peerct = 0;
	int frametype;
	int len;
	int source_peerid;
	int source_peerct;
	int tapmsg_len;
	unsigned char new_peeraddr[peeraddr_SIZE];

	while(g_mainloop) {
		tnow = utilGetTime();
		
		// wait until some fds become active
		ioWait(&iostate, POLLWAIT);

		// check udp sockets
		while((len = (ioRecvPacket(&iostate, buf, 4096, new_peeraddr))) > 0) {
			if(p2psecInputPacket(g_p2psec, buf, len, new_peeraddr)) {
				// output frames to tap device
				msg = p2psecRecvMSGFromPeerID(g_p2psec, &source_peerid, &source_peerct, &len);
				if(msg != NULL && len > 12 && g_enableeth > 0) {
					switchFrameIn(&g_switchstate, msg, len, source_peerid, source_peerct);
					ndp6PacketIn(&g_ndpstate, msg, len, source_peerid, source_peerct);
					if(!((ioWriteTap(&iostate, msg, len) > 0))) {
						logWarning("could not write to tap device!");
					}
				}
				
				// output packets
				while((len = (p2psecOutputPacket(g_p2psec, buf, 4096, new_peeraddr))) > 0) {
					ioSendPacket(&iostate, buf, len, new_peeraddr);
				}
			}
		}

		// check for ethernet frames on tap device
		if(g_enableeth > 0) {
			if((len = (ioReadTap(&iostate, msgbuf, 4096))) > 0) {
				if((g_enablevirtserv) && ((tapmsg_len = (virtservFrame(&g_virtserv, tapmsgbuf, 1024, msgbuf, len))) > 0)) {
					// virtual service frame
					ioWriteTap(&iostate, tapmsgbuf, tapmsg_len);
				}
				else {
					// regular frame
					frametype = switchFrameOut(&g_switchstate, msgbuf, len, &source_peerid, &source_peerct);
					switch(frametype) {
						case switch_FRAME_TYPE_UNICAST:
							if(peermgtIsActiveIDCT(&g_p2psec->mgt, source_peerid, source_peerct)) {
								do_broadcast = 0;
								p2psecSendMSGToPeerID(g_p2psec, source_peerid, source_peerct, msgbuf, len);
							}
							else {
								do_broadcast = 1;
							}
							break;
						case(switch_FRAME_TYPE_BROADCAST):
							do_broadcast = 1;
							break;
						default:
							do_broadcast = 0;
							break;
					}
					if(do_broadcast) {
						if(g_enablendpcache) {
							// ndp cache enabled, check whether we can avoid the broadcast and answer from the cache instead
							tapmsg_len = ndp6GenAdv(&g_ndpstate, msgbuf, len, tapmsgbuf, 128, &ndp_peerid, &ndp_peerct);
							if(tapmsg_len > 0) {
								if(peermgtIsActiveIDCT(&g_p2psec->mgt, ndp_peerid, ndp_peerct)) {
									// answer from cache
									ioWriteTap(&iostate, tapmsgbuf, tapmsg_len);
								}
								else {
									// cache entry is outdated, send broadcast
									p2psecSendBroadcastMSG(g_p2psec, msgbuf, len);
								}
							}
							else {
								// no cache entry or message not a neighbour solicitation, send broadcast
								p2psecSendBroadcastMSG(g_p2psec, msgbuf, len);
							}
						}
						else {
							// ndp cache disabled, send broadcast
							p2psecSendBroadcastMSG(g_p2psec, msgbuf, len);
						}
					}
				}
			}
		}
		
		// output packets
		while((len = (p2psecOutputPacket(g_p2psec, buf, 4096, new_peeraddr))) > 0) {
			ioSendPacket(&iostate, buf, len, new_peeraddr);
		}

		// show status
		if((tnow - laststatus) > 10) {
			laststatus = tnow;
			connectcount = mapGetKeyCount(&g_p2psec->mgt.map);
			if(lastconnectcount != connectcount) {
				printf("[%d] %d peers connected.\n", tnow, (connectcount - 1));
				lastconnectcount = connectcount;
			}
		}

		// connect initpeers
		if(((tnow - lastinit) > 30) && (!(mapGetKeyCount(&g_p2psec->mgt.map) > 1))) {
			lastinit = tnow;
			connectInitpeers();
		}
		
		// check console
		if(g_enableconsole > 0) {
			len = ioReadSTDIN(&iostate, cmdbuf, 1024);
			if(len > 0) {
				decodeConsole((char *)cmdbuf, len);
			}
		}
	}
}

