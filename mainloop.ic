/***************************************************************************
 *   Copyright (C) 2012 by Tobias Volk                                     *
 *   mail@tobiasvolk.de                                                    *
 *                                                                         *
 *   This program is free software: you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation, either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *
 ***************************************************************************/


// the mainloop
static void mainLoop() {
	int tnow;
	unsigned char buf[4096];
	unsigned char msgbuf[4096];
	unsigned char cmdbuf[1024];
	unsigned char *msg;
	int lastinit = 0;
	int laststatus = 0;
	int lastconnectcount = 0;
	int connectcount = 0;
	int frametype;
	int len;
	unsigned char *genframe;
	int genframe_len;
	int source_peerid;
	int source_peerct;
	unsigned char new_peeraddr[peeraddr_SIZE];

	while(g_mainloop) {
		tnow = utilGetTime();
		
		// wait until some fds become active
		ioWait(&iostate, POLLWAIT);

		// check udp sockets
		while((len = (ioRecvPacket(&iostate, buf, 4096, new_peeraddr))) > 0) {
			if(p2psecInputPacket(g_p2psec, buf, len, new_peeraddr)) {
				// output frames to tap device
				msg = p2psecRecvMSGFromPeerID(g_p2psec, &source_peerid, &source_peerct, &len);
				if(msg != NULL && len > 12 && g_enableeth > 0) {
					switchFrameIn(&g_switchstate, msg, len, source_peerid, source_peerct);
					if(!((ioWriteTap(&iostate, msg, len) > 0))) {
						logWarning("could not write to tap device!");
					}
				}
				
				// output packets
				while((len = (p2psecOutputPacket(g_p2psec, buf, 4096, new_peeraddr))) > 0) {
					ioSendPacket(&iostate, buf, len, new_peeraddr);
				}
			}
		}

		// check for ethernet frames on tap device
		if(g_enableeth > 0) {
			if((len = (ioReadTap(&iostate, msgbuf, 4096))) > 0) {
				frametype = switchFrameOut(&g_switchstate, msgbuf, len, &source_peerid, &source_peerct);
				if((g_enablendpcache) && ((genframe = (switchGetGeneratedFrame(&g_switchstate, &genframe_len))) != NULL)) {
					if(!((ioWriteTap(&iostate, genframe, genframe_len) > 0))) {
						logWarning("could not write to tap device!");
					}
				}
				if(frametype == switch_FRAME_TYPE_UNICAST) {
					if(peermgtIsActiveIDCT(&g_p2psec->mgt, source_peerid, source_peerct)) {
						p2psecSendMSGToPeerID(g_p2psec, source_peerid, source_peerct, msgbuf, len);
					}
					else {
						p2psecSendBroadcastMSG(g_p2psec, msgbuf, len);
					}
				}
				else {
					if(frametype == switch_FRAME_TYPE_BROADCAST) {
						p2psecSendBroadcastMSG(g_p2psec, msgbuf, len);
					}
				}
			}
		}
		
		// output packets
		while((len = (p2psecOutputPacket(g_p2psec, buf, 4096, new_peeraddr))) > 0) {
			ioSendPacket(&iostate, buf, len, new_peeraddr);
		}

		// show status
		if((tnow - laststatus) > 10) {
			laststatus = tnow;
			connectcount = mapGetKeyCount(&g_p2psec->mgt.map);
			if(lastconnectcount != connectcount) {
				printf("[%d] %d peers connected.\n", tnow, (connectcount - 1));
				lastconnectcount = connectcount;
			}
		}

		// connect initpeers
		if(((tnow - lastinit) > 30) && (!(mapGetKeyCount(&g_p2psec->mgt.map) > 1))) {
			lastinit = tnow;
			connectInitpeers();
		}
		
		// check console
		if(g_enableconsole > 0) {
			len = ioReadSTDIN(&iostate, cmdbuf, 1024);
			if(len > 0) {
				decodeConsole((char *)cmdbuf, len);
			}
		}
	}
}

